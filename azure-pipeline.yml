trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: varcody  # Grupo de variables con credenciales de JFrog

steps:

# 🔹 Verificar e instalar JFrog CLI solo si no está instalado
- script: |
    if ! command -v jf &> /dev/null; then
      echo "JFrog CLI no encontrado, instalando..."
      curl -fL https://install-cli.jfrog.io | sh
      echo "Instalación completada."

      # Agregar JFrog CLI al PATH si está en ~/.jfrog/current
      if [ -f "$HOME/.jfrog/current/jf" ]; then
        echo 'export PATH=$HOME/.jfrog/current:$PATH' >> ~/.bashrc
        export PATH=$HOME/.jfrog/current:$PATH
      elif [ -f "/usr/local/bin/jf" ]; then
        echo "JFrog CLI encontrado en /usr/local/bin"
      else
        echo "Error: No se encontró el binario de JFrog CLI después de la instalación."
        exit 1
      fi
    else
      echo "JFrog CLI ya está instalado."
    fi

    # Verificar instalación final
    source ~/.bashrc
    jf --version || { echo "Error: JFrog CLI no está accesible."; exit 1; }
  displayName: 'Verificar e instalar JFrog CLI si es necesario'

# 🔹 Configurar JFrog CLI en modo no interactivo
- script: |
    export CI=true
    jf c add jfrogmdevops \
      --artifactory-url=$(JFROGA_URL) \
      --user=$(JFROG_USERNAME) \
      --password=$(JFROG_APITOKEN) \
      --interactive=false
  displayName: 'Configurar JFrog CLI en modo no interactivo'

# 🔹 Configurar PyPI en Artifactory correctamente (resolver y deploy)
- script: |
    export CI=true
    jf rt pip-config \
      --server-id-resolve=$(JFROG_SERVER) \
      --repo-resolve=$(REPO_PYPI) \
      --server-id-deploy=$(JFROG_SERVER) \
      --repo-deploy=$(REPO_PYPI) \
      --global
  displayName: 'Configurar PyPI con Artifactory correctamente'

# 🔹 Verificar y actualizar herramientas de compilación si es necesario
- script: |
    if ! dpkg -l | grep -E 'python3-pip|python3-setuptools|python3-wheel|ninja-build'; then
      sudo apt-get update && sudo apt-get install -y python3-pip python3-setuptools python3-wheel ninja-build
    fi
    pip show meson >/dev/null 2>&1 || pip install --upgrade meson
  displayName: 'Verificar y actualizar herramientas de compilación si es necesario'

# 🔹 Verificar que ninja está instalado y en el PATH
- script: |
    if ! command -v ninja &>/dev/null; then
      echo "Ninja no encontrado. Instalando..."
      sudo apt-get update && sudo apt-get install -y ninja-build
    fi
    echo "Verificando versión de Ninja:"
    ninja --version
  displayName: 'Verificar e instalar Ninja si es necesario'

# 🔹 Verificar e instalar pycairo si es necesario
- script: |
    export PATH=$PATH:/usr/bin
    pip show pycairo >/dev/null 2>&1 || pip install --no-cache-dir --index-url=https://pypi.org/simple pycairo
  displayName: 'Verificar e instalar pycairo si es necesario'


# 🔹 Leer `requirements.txt` y subir solo esas dependencias a Artifactory
- script: |
    echo "📌 Descargando y subiendo dependencias de requirements.txt a Artifactory..."
    
    # Crear carpeta temporal para paquetes
    mkdir -p downloaded_packages
    
    # Descargar solo los paquetes listados en requirements.txt
    pip download -r requirements.txt -d downloaded_packages

    # Subir los paquetes descargados a Artifactory
    jf rt u "downloaded_packages/*.whl" pypi-local/
  displayName: 'Subir dependencias de requirements.txt a Artifactory'

# 🔹 Descargar dependencias desde Artifactory asegurando versión correcta
- script: |
    echo "📌 Instalando dependencias desde Artifactory..."
    pip install --index-url=https://devopsm.jfrog.io/artifactory/api/pypi/pypi-local/simple -r requirements.txt
  displayName: 'Descargar dependencias desde Artifactory'

# 🔹 Opcional: Verificar que todas las dependencias se instalaron correctamente
- script: |
    echo "📌 Verificando instalación de dependencias..."
    while read package; do
      pkg_name=$(echo $package | cut -d'=' -f1)
      pip show $pkg_name > /dev/null || echo "⚠️ Falta instalar: $pkg_name"
    done < requirements.txt
  displayName: 'Verificar instalación de dependencias'

# 🔹 Descargar dependencias desde Artifactory asegurando versión correcta
- script: |
    if [ -f requirements.txt ] && [ -s requirements.txt ]; then
        echo "📌 Descargando dependencias desde Artifactory..."
        pip install --no-cache-dir -r requirements.txt
    else
        echo "🚨 Error: requirements.txt no encontrado o vacío."
        exit 1
    fi
  displayName: 'Descargar dependencias desde Artifactory'
