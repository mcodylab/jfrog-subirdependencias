trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: varcody  # Grupo de variables con credenciales de JFrog

steps:

# 🔹 Verificar e instalar JFrog CLI solo si no está instalado
- script: |
    if ! command -v jf &> /dev/null; then
      echo "JFrog CLI no encontrado, instalando..."
      curl -fL https://install-cli.jfrog.io | sh
      echo "Instalación completada."

      # Agregar JFrog CLI al PATH si está en ~/.jfrog/current
      if [ -f "$HOME/.jfrog/current/jf" ]; then
        echo 'export PATH=$HOME/.jfrog/current:$PATH' >> ~/.bashrc
        export PATH=$HOME/.jfrog/current:$PATH
      elif [ -f "/usr/local/bin/jf" ]; then
        echo "JFrog CLI encontrado en /usr/local/bin"
      else
        echo "Error: No se encontró el binario de JFrog CLI después de la instalación."
        exit 1
      fi
    else
      echo "JFrog CLI ya está instalado."
    fi

    # Verificar instalación final
    source ~/.bashrc
    jf --version || { echo "Error: JFrog CLI no está accesible."; exit 1; }
  displayName: 'Verificar e instalar JFrog CLI si es necesario'

# 🔹 Configurar JFrog CLI en modo no interactivo
- script: |
    export CI=true
    jf c add jfrogmdevops \
      --artifactory-url=$(JFROGA_URL) \
      --user=$(JFROG_USERNAME) \
      --password=$(JFROG_APITOKEN) \
      --interactive=false
  displayName: 'Configurar JFrog CLI en modo no interactivo'

# 🔹 Configurar PyPI en Artifactory correctamente (resolver y deploy)
- script: |
    export CI=true
    jf rt pip-config \
      --server-id-resolve=$(JFROG_SERVER) \
      --repo-resolve=$(REPO_PYPI) \
      --server-id-deploy=$(JFROG_SERVER) \
      --repo-deploy=$(REPO_PYPI) \
      --interactive=false
  displayName: 'Configurar PyPI con Artifactory correctamente'

# 🔹 Instalar dependencias y subirlas a Artifactory
- script: |
    pip freeze > requirements.txt
    jf pip install -r requirements.txt --build-name=$(PACKAGE_NAME) --build-number=$(BUILD_NUMBER)
    jf rt bp $(PACKAGE_NAME) $(BUILD_NUMBER)
  displayName: 'Subir dependencias a Artifactory'

# 🔹 Actualizar herramientas de compilación
- script: |
    sudo apt-get update
    sudo apt-get install -y python3-pip python3-setuptools python3-wheel ninja-build
    pip install --upgrade meson
  displayName: 'Actualizar Meson y dependencias de compilación'

# 🔹 Descargar dependencias desde Artifactory
- script: |
    pip install -r requirements.txt
  displayName: 'Descargar dependencias desde Artifactory'
