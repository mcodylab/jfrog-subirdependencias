trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: varcody

steps:

# 游댳 Verificar e instalar JFrog CLI solo si no est치 instalado
- script: |
    if ! command -v jf &> /dev/null; then
      echo "JFrog CLI no encontrado, instalando..."
      curl -fL https://install-cli.jfrog.io | sh
      echo "Instalaci칩n completada."

      # Verificar si el binario est치 en ~/.jfrog
      if [ -f "$HOME/.jfrog/current/jf" ]; then
        echo "JFrog CLI encontrado en ~/.jfrog/current/jf"
        echo 'export PATH=$HOME/.jfrog/current:$PATH' >> ~/.bashrc
        export PATH=$HOME/.jfrog/current:$PATH
      elif [ -f "/usr/local/bin/jf" ]; then
        echo "JFrog CLI encontrado en /usr/local/bin"
      else
        echo "Error: No se encontr칩 el binario de JFrog CLI despu칠s de la instalaci칩n."
        exit 1
      fi
    else
      echo "JFrog CLI ya est치 instalado."
    fi

    # Verificar instalaci칩n final
    source ~/.bashrc
    jf --version || { echo "Error: JFrog CLI no est치 accesible."; exit 1; }
  displayName: 'Verificar e instalar JFrog CLI si es necesario'



# 游댳 Configurar JFrog CLI solo si no est치 configurado
- script: |
    if ! jf config show jfrogmdevops &> /dev/null; then
      echo "Configurando JFrog CLI..."
      jf config add jfrogmdevops \
        --artifactory-url=$(JFROGA_URL) \
        --xray-url=$(JFROGX_URL) \
        --user=$(JFROG_USERNAME) \
        --password=$(JFROG_APITOKEN) \
        --interactive=false
    else
      echo "JFrog CLI ya est치 configurado."
    fi
  displayName: 'Configurar JFrog CLI si es necesario'

# 游댳 Configurar PyPI en Artifactory solo si no est치 configurado
- script: |
    PIP_CONFIGURED=$(jf rt pip-config --server-id-resolve=$(JFROG_SERVER) --repo-resolve=$(REPO_PYPI) 2>&1 || echo "not_configured")
    if [[ "$PIP_CONFIGURED" == *"not_configured"* ]]; then
      echo "Configurando PyPI en Artifactory..."
      jf rt pip-config --server-id-resolve=$(JFROG_SERVER) --repo-resolve=$(REPO_PYPI)
    else
      echo "PyPI ya est치 configurado en Artifactory."
    fi
  displayName: 'Configurar PyPI con Artifactory si es necesario'

# 游댳 Instalar dependencias solo si no est치n instaladas
- script: |
    pip freeze > requirements.txt
  displayName: 'Instalar dependencias si es necesario'

# 游댳 Subir dependencias a Artifactory
- script: |
    jf rt upload "requirements.txt" $(REPO_PYPI) --build-name=$(PACKAGE_NAME) --build-number=$(BUILD_NUMBER)
  displayName: 'Subir dependencias a Artifactory'

# 游댳 Actualizar Meson y herramientas de compilaci칩n solo si es necesario
- script: |
    if ! command -v meson &> /dev/null; then
      echo "Instalando herramientas de compilaci칩n..."
      sudo apt-get update && sudo apt-get install -y python3-pip python3-setuptools python3-wheel ninja-build
      pip install --upgrade meson
    else
      echo "Las herramientas de compilaci칩n ya est치n instaladas."
    fi
  displayName: 'Actualizar herramientas de compilaci칩n si es necesario'

# 游댳 Descargar dependencias desde Artifactory solo si no est치n instaladas
- script: |
    MISSING_DEPENDENCIES=$(pip check 2>&1 || echo "missing")
    if [[ "$MISSING_DEPENDENCIES" == *"missing"* ]]; then
      echo "Descargando dependencias desde Artifactory..."
      pip install -r requirements.txt
    else
      echo "Todas las dependencias ya est치n instaladas."
    fi
  displayName: 'Descargar dependencias si es necesario'
