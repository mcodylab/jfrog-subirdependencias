trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: varcody  # Grupo de variables con credenciales de JFrog

steps:

# 游댳 Verificar e instalar JFrog CLI solo si no est치 instalado
- script: |
    if ! command -v jf &> /dev/null; then
      echo "JFrog CLI no encontrado, instalando..."
      curl -fL https://install-cli.jfrog.io | sh
      echo "Instalaci칩n completada."

      # Agregar JFrog CLI al PATH si est치 en ~/.jfrog/current
      if [ -f "$HOME/.jfrog/current/jf" ]; then
        echo 'export PATH=$HOME/.jfrog/current:$PATH' >> ~/.bashrc
        export PATH=$HOME/.jfrog/current:$PATH
      elif [ -f "/usr/local/bin/jf" ]; then
        echo "JFrog CLI encontrado en /usr/local/bin"
      else
        echo "Error: No se encontr칩 el binario de JFrog CLI despu칠s de la instalaci칩n."
        exit 1
      fi
    else
      echo "JFrog CLI ya est치 instalado."
    fi

    # Verificar instalaci칩n final
    source ~/.bashrc
    jf --version || { echo "Error: JFrog CLI no est치 accesible."; exit 1; }
  displayName: 'Verificar e instalar JFrog CLI si es necesario'

# 游댳 Configurar JFrog CLI en modo no interactivo
- script: |
    export CI=true
    jf c add jfrogmdevops \
      --artifactory-url=$(JFROGA_URL) \
      --user=$(JFROG_USERNAME) \
      --password=$(JFROG_APITOKEN) \
      --interactive=false
  displayName: 'Configurar JFrog CLI en modo no interactivo'

# 游댳 Configurar PyPI en Artifactory correctamente (resolver y deploy)
- script: |
    export CI=true
    jf rt pip-config \
      --server-id-resolve=$(JFROG_SERVER) \
      --repo-resolve=$(REPO_PYPI) \
      --server-id-deploy=$(JFROG_SERVER) \
      --repo-deploy=$(REPO_PYPI) \
      --global
  displayName: 'Configurar PyPI con Artifactory correctamente'

# 游댳 Verificar y actualizar herramientas de compilaci칩n si es necesario
- script: |
    if ! dpkg -l | grep -E 'python3-pip|python3-setuptools|python3-wheel|ninja-build'; then
      sudo apt-get update && sudo apt-get install -y python3-pip python3-setuptools python3-wheel ninja-build
    fi
    pip show meson >/dev/null 2>&1 || pip install --upgrade meson
  displayName: 'Verificar y actualizar herramientas de compilaci칩n si es necesario'

# 游댳 Verificar que ninja est치 instalado y en el PATH
- script: |
    if ! command -v ninja &>/dev/null; then
      echo "Ninja no encontrado. Instalando..."
      sudo apt-get update && sudo apt-get install -y ninja-build
    fi
    echo "Verificando versi칩n de Ninja:"
    ninja --version
  displayName: 'Verificar e instalar Ninja si es necesario'

# 游댳 Verificar e instalar pycairo si es necesario
- script: |
    export PATH=$PATH:/usr/bin
    pip show pycairo >/dev/null 2>&1 || pip install --no-cache-dir --index-url=https://pypi.org/simple pycairo
  displayName: 'Verificar e instalar pycairo si es necesario'

# 游댳 Instalar dependencias y subirlas a Artifactory solo si es necesario
- script: |
    pip freeze > requirements.txt

    if [ -s requirements.txt ]; then
        echo "Subiendo dependencias a Artifactory..."
        jf pip install -r requirements.txt --build-name=$(PACKAGE_NAME) --build-number=$(BUILD_NUMBER)
        jf rt bp $(PACKAGE_NAME) $(BUILD_NUMBER)
    else
        echo "Error: requirements.txt est치 vac칤o. No hay dependencias para subir."
        exit 1
    fi
  displayName: 'Subir dependencias a Artifactory'

# 游댳 Descargar dependencias desde Artifactory solo si el archivo existe
- script: |
    if [ -f requirements.txt ] && [ -s requirements.txt ]; then
        echo "Descargando dependencias desde Artifactory..."
        pip install -r requirements.txt
    else
        echo "Error: requirements.txt no encontrado o vac칤o. No se descargar치n dependencias."
        exit 1
    fi
  displayName: 'Descargar dependencias desde Artifactory'
