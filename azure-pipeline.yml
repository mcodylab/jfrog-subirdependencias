trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: varcody  # Grupo de variables con credenciales de JFrog

steps:

# üîπ Verificar e instalar JFrog CLI solo si no est√° instalado
- script: |
    if ! command -v jf &> /dev/null; then
      echo "JFrog CLI no encontrado, instalando..."
      curl -fL https://install-cli.jfrog.io | sh
      echo "Instalaci√≥n completada."

      # Agregar JFrog CLI al PATH si est√° en ~/.jfrog/current
      if [ -f "$HOME/.jfrog/current/jf" ]; then
        echo 'export PATH=$HOME/.jfrog/current:$PATH' >> ~/.bashrc
        export PATH=$HOME/.jfrog/current:$PATH
      elif [ -f "/usr/local/bin/jf" ]; then
        echo "JFrog CLI encontrado en /usr/local/bin"
      else
        echo "Error: No se encontr√≥ el binario de JFrog CLI despu√©s de la instalaci√≥n."
        exit 1
      fi
    else
      echo "JFrog CLI ya est√° instalado."
    fi

    # Verificar instalaci√≥n final
    source ~/.bashrc
    jf --version || { echo "Error: JFrog CLI no est√° accesible."; exit 1; }
  displayName: 'Verificar e instalar JFrog CLI si es necesario'

# üîπ Configurar JFrog CLI en modo no interactivo
- script: |
    export CI=true
    jf c add jfrogmdevops \
      --artifactory-url=$(JFROGA_URL) \
      --user=$(JFROG_USERNAME) \
      --password=$(JFROG_APITOKEN) \
      --interactive=false
  displayName: 'Configurar JFrog CLI en modo no interactivo'

# üîπ Configurar PyPI en Artifactory correctamente (resolver y deploy)
- script: |
    export CI=true
    jf rt pip-config \
      --server-id-resolve=$(JFROG_SERVER) \
      --repo-resolve=$(REPO_PYPI) \
      --server-id-deploy=$(JFROG_SERVER) \
      --repo-deploy=$(REPO_PYPI) \
      --global
  displayName: 'Configurar PyPI con Artifactory correctamente'

# üîπ Verificar y actualizar herramientas de compilaci√≥n si es necesario
- script: |
    if ! dpkg -l | grep -E 'python3-pip|python3-setuptools|python3-wheel|ninja-build'; then
      sudo apt-get update && sudo apt-get install -y python3-pip python3-setuptools python3-wheel ninja-build
    fi
    pip show meson >/dev/null 2>&1 || pip install --upgrade meson
  displayName: 'Verificar y actualizar herramientas de compilaci√≥n si es necesario'

# üîπ Verificar que ninja est√° instalado y en el PATH
- script: |
    if ! command -v ninja &>/dev/null; then
      echo "Ninja no encontrado. Instalando..."
      sudo apt-get update && sudo apt-get install -y ninja-build
    fi
    echo "Verificando versi√≥n de Ninja:"
    ninja --version
  displayName: 'Verificar e instalar Ninja si es necesario'

# üîπ Verificar e instalar pycairo si es necesario
- script: |
    export PATH=$PATH:/usr/bin
    pip show pycairo >/dev/null 2>&1 || pip install --no-cache-dir --index-url=https://pypi.org/simple pycairo
  displayName: 'Verificar e instalar pycairo si es necesario'


# Subir dependencias a Artifactory
- script: |
    echo "Descargando dependencias de requirements ..."
    
    # Descargar paquetes en formato .whl directamente en el directorio actual
    pip wheel -r $(REPO_DEPEND) --wheel-dir=.
    
    # Verificar que se descargaron paquetes
    if [ -z "$(ls -A *.whl 2>/dev/null)" ]; then
        echo " No se descargaron paquetes en formato .whl. Verifica que requirements.txt tenga dependencias v√°lidas."
        exit 1
    fi
    
    echo " Subiendo dependencias a Artifactory..."
    
    # Subiendo paquetes
    for file in *.whl; do
        echo "Subiendo: $file"
        jf rt u "$file"  $(REPO_PYPI)/ --flat=true
    done
  displayName: 'Subir dependencias de requirements.txt a Artifactory'









# üîπ Descargar dependencias desde Artifactory asegurando versi√≥n correcta
- script: |
    echo "üìå Instalando dependencias desde Artifactory con autenticaci√≥n..."
    
    # Definir credenciales de Artifactory
 
    ARTIFACTORY_URL="https://devopsm.jfrog.io/artifactory/api/pypi/pypi-local/simplee"
    
    # Desactivar keyring
    export PYTHON_KEYRING_BACKEND=keyring.backends.null.Keyring
    echo "üìå Configurando autenticaci√≥n en JFrog Artifactory..."
    

    
    # Instalar dependencias con autenticaci√≥n
    pip install --no-cache-dir --index-url=$(ARTIFACTORY_URL) -r requirements.txt
  
    echo "üìå Verificando instalaci√≥n de todas las dependencias..."
    while IFS= read -r package; do
        package_name=$(echo "$package" | cut -d'=' -f1)  # Extraer solo el nombre del paquete
        if pip list | grep -i "^$package_name "; then
            echo "‚úÖ $package_name est√° instalado"
        else
            echo "‚ùå $package_name NO est√° instalado"
        fi
    done < <(grep -Eo '^[^#]+' requirements.txt | awk '{print $1}')
  displayName: 'Descargar e instalar dependencias desde Artifactory con autenticaci√≥n'


# üîπ Opcional: Verificar que todas las dependencias se instalaron correctamente
- script: |
    echo "üìå Verificando instalaci√≥n de dependencias..."
    while read package; do
      pkg_name=$(echo $package | cut -d'=' -f1)
      pip show $pkg_name > /dev/null || echo "‚ö†Ô∏è Falta instalar: $pkg_name"
    done < requirements.txt
  displayName: 'Verificar instalaci√≥n de dependencias'

# üîπ Descargar dependencias desde Artifactory asegurando versi√≥n correcta
- script: |
    if [ -f requirements.txt ] && [ -s requirements.txt ]; then
        echo "üìå Descargando dependencias desde Artifactory..."
        pip install --no-cache-dir -r requirements.txt
    else
        echo "üö® Error: requirements.txt no encontrado o vac√≠o."
        exit 1
    fi
  displayName: 'Descargar dependencias desde Artifactory'
